#!/usr/bin/env /home/mastertaku/Programming/Python/feedDownloader/.venv/bin/python3
"""
rss2youtube-dl
Desc: A utility that downloads and parses rss feeds for videos to download with youtube-dl
v.1.0
2020 by antiSOFT

Usage:
  rss2youtube-dl [-dCDi] [-c CONFIGFILE] [-r CHANNEL]
  rss2youtube-dl --help
  rss2youtube-dl --version

Options:
  -c --config CONFIGFILE                Use custom configuration file             
  -i --interactive                      Interactive mode
  -d --demo                             Don't save or add to seen
  -C --cron                             Script being run by cron, don't be interactive.
  -D --debug                            Print debug info to screen.
  -r --rss-from-channel CHANNEL         Get rss url for youtube channel url provided
  -h --help                             Show this screen
  --version                             Show version info

"""

#
# TODO:
#
# [X] handle multiple filters
# [ ] handle filter to directory that overrides a default
# [X] add progress
# [X] problem_db and ignore_db
# [X] make problem_db prompt more human readable
# [X] add playlist handler
# [X] playlist downloads to folder
# [X] interactive mode that bypasses filters and asks on each unseen video if you want to DL it.
# [X] get RSS from channel url
# [ ] Refactor the code to get rid of the deep if/then
#

from docopt import docopt
from feed import Feed
from seendb import SeenDB
from problemdb import ProblemDB
from channel import Channel
from errors import *
import youtube_dl
import os
import time
import sys
import re

percent = '  0.0'
the_error = ''
arguments = ''
basepath = os.path.dirname(os.path.abspath(__file__))
basename = os.path.basename(__file__)

def print(*args,**kwargs):
    try:
        end = kwargs['end']
    except:
        end = '\n'
    try:
        err = kwargs['error']
        sys.stderr.write(" ".join(args) + end)
    except:
        sys.stdout.write(" ".join(args) + end)

def delete_last_line():
    CURSOR_UP_ONE = '\x1b[1A' 
    ERASE_LINE = '\x1b[2K'
    print(CURSOR_UP_ONE + ERASE_LINE,end="",flush=True)

class MyLogger(object):
    def __init__(self):
        global basepath
        self.logfile = os.path.join(basepath,'.error.log')

    def debug(self, msg):
        global arguments
        if arguments['--debug']:

            print(msg)

    def warning(self, msg):
        pass

    def error(self, msg):
        try:
            with open(self.logfile, 'a') as log:
                log.write(msg)
            return True
        except:
            return False

def ydl_hook(d):
    global percent
    if '_percent_str' not in d: return
    print('\b' * len(percent), end="", flush=True)
    percent = d['_percent_str']
    print(percent,end='',flush=True)

def ydl_opts(title,path):
    ydlopts = {
        "outtmpl": f"{path}/{title}.%(ext)s",
        "format": "best",
        "quiet": True,
        "retries": 3,
        "nooverwrites": True,
        "continued": True,
        'logger': MyLogger(),
        "progress_hooks":[ydl_hook],
        }
    return ydlopts

def is_video(item):
    if re.search(r'youtu.be', item) or re.search(r'youtube.com', item):
        return True
    if re.search(r'twitter.com', item):
        return True
    if re.search(r'facebook.com', item):
        return True
    return False

def video_list(url,title='',path=''):
    try:
        #print("Collecting video info...",end="",flush=True)
        with youtube_dl.YoutubeDL(ydl_opts(title,path)) as ydl:
            rv = ydl.extract_info(url, False)
    except youtube_dl.utils.DownloadError as e:
        if "Premieres" in str(e):
            raise ValueError
        elif "no video" in str(e):
            raise ytdlNoVideo
        elif "Copyright" in str(e):
            raise ytdlCopyright
        else:
            print(e,error=True)
            exit(1)
    #print("Done.")
    if '_type' not in rv: 
        return {title: {'url':url,'path':path}}
    print(f"{title}...PLAYLIST!",flush=True)
    rv_list = {}
    for entry in rv['entries']:
        rv_list[entry['title']] = {'url':entry['webpage_url'],'path':f"{path}/{title}"}
        print(f"{entry['title']} added.",flush=True)
    return rv_list

def download(title,path,href): 
    global the_error,percent
    try:
        urls = video_list(href,title,path)
    except ValueError:
        the_error = "Waiting for premiere."
        return False
    except ytdlNoVideo:
        the_error = "No video found."
        return False
    except ytdlCopyright:
        the_error = "Copyright block!"
        return False
    #print(urls)
    for video_title in urls.keys():
        try:
            print(f"{video_title}...Downloading",end=f": {percent}",flush=True)
            with youtube_dl.YoutubeDL(ydl_opts(video_title,urls[video_title]['path'])) as ydl:
                ydl.download([urls[video_title]['url']]) 
        except Exception as e:
            the_error = str(e)
            return False
        print('\b' * (len(percent)+13), end="", flush=True)
        percent = '  0.0'
        print("SUCCESS!" + ' ' * 15)
    return True

def in_filter(filter,title):
    if not isinstance(filter,list):
        filter = [filter]
    for pattern in filter:
        #print(pattern,"->",title)
        if re.search(pattern,title):
            return True
        else:
            continue
    #print("false")
    return False

def get_rss(channel):
    from bs4 import BeautifulSoup
    import requests 
    reqs = requests.get(channel)
    soup = BeautifulSoup(reqs.text, 'html.parser')
    try:
        return soup.find("link",title="RSS").get('href')
    except:
        print("Couldn't find an RSS link for the channel provided.",error=True)
        exit(1)

def main():
    try:
        global percent, the_error,arguments
        args = arguments
        if args['--config']:
            if os.path.isfile(args['--config']):
                print(f"Loading custom configuration: {args['--config']}")
                channels = Channel(args['--config']).list()
            else:
                print("File",args['--config'],"does not exist",error=True)
                exit(1)
        else:
            print('Loading default configuration.')
            channels = Channel().list()
        seen_db = SeenDB()
        problem_db = ProblemDB()
        for channel in channels:
            #print(channel)
            print("Downloading feed list...",end="",flush=True)
            video_list = Feed(channel['rss']).download()
            if video_list:
                print("Done.")
                for item in video_list:
                    if args['--interactive']:
                        bypass_filter = True
                    else:
                        bypass_filter = False
                    if ('filter' in channel.keys() and in_filter(channel['filter'],item['title'])) or ('filter' not in channel.keys()) or bypass_filter:
                        if not seen_db.exists(item['href']) and not problem_db.is_ignored(item['href']):
                            if is_video(item['href']):
                                if args['--interactive']:
                                    decision = None
                                    while decision == None:
                                        try:
                                            answer = input(f"Download {item['title']}? (y/[n]) ")
                                            if answer[0] == 'y' or answer[0] == 'n' or len(answer) == 0:
                                                if answer[0] == 'y':
                                                    decision = True
                                                else:
                                                    decision = False                    
                                            else:
                                                raise ValueError
                                        except ValueError:
                                            #exit(1)
                                            print('You must enter y or n.')
                                        except IndexError:
                                            decision = False
                                    delete_last_line()
                                    if not decision:
                                        seen_db.add(item['href'])
                                        print(f"{item['title']}...SKIPPING!!")
                                        continue
                                if not args['--demo']:
                                    if download(item['title'],channel['download_dir'],item['href']):
                                        seen_db.add(item['href'])
                                    else:
                                        problem_db.add(item['title'],item['href'])
                                        print('\b' * (len(percent)+13), end="", flush=True)
                                        print(f"{item['title']}...FAILED!! {the_error}")
                                else:
                                    print("DEMO!")
                            else:
                                continue
                        else:
                            print(f"{item['title']}...SEEN!")
            else:
                print("Failed.")
        if len(problem_db):
            print("\nThere were problems with the following links:") 
            if not args['--cron']:
                for problem in problem_db:
                    while True:
                        try:
                            answer = input(f"{problem}: Ignore? (y/[n]) ")
                            if len(answer) == 0: break
                            if answer[0].lower() != 'y' and answer[0].lower() != 'n' and len(answer) != 0:
                                raise ValueError
                            else:
                                if answer[0].lower() == 'y':
                                    problem_db.ignore(problem)
                                break
                        except ValueError:
                            print("Enter yes or no....")
            else:
                print(problem_db)
        exit()
    except KeyboardInterrupt:
        print("\nProgram terminating...")
        exit(0)

if __name__ == "__main__":
  arguments = docopt(__doc__, version='rss2youtube-dl v.1.0')
  #print(arguments)
  #exit()
  if arguments['--rss-from-channel']:
      print(get_rss(arguments['--rss-from-channel']))
      exit(0)
  main()
  exit()
