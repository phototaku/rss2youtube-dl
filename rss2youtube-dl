#!/usr/bin/env python3
"""
rss2youtube-dl
Desc: A utility that downloads and parses rss feeds for videos to download with youtube-dl
v.1.0.3
2020 by magiclab

Usage:
  rss2youtube-dl [-CDHvdhi] [-c CONFIGFILE] [-r CHANNEL]
  rss2youtube-dl --help
  rss2youtube-dl --version

Options:
  -c --config CONFIGFILE                Use custom configuration file             
  -i --interactive                      Interactive mode
  -d --demo                             Don't save or add to seen
  -H --hide-seen                        Hide seen messages.
  -C --cron                             Script being run by cron, don't be interactive.
  -D --debug                            Print debug info to screen.
  -r --rss-from-channel CHANNEL         Get rss url for youtube channel url provided
  -h --help                             Show this screen
  -v --verbose                          Verbose
  --version                             Show version info

"""

#
# TODO:
#
# [X] handle multiple filters
# [X] handle filter to directory that overrides a default
# [X] add progress
# [X] problem_db and ignore_db
# [X] make problem_db prompt more human readable
# [X] add playlist handler
# [X] playlist downloads to folder
# [X] interactive mode that bypasses filters and asks on each unseen video if you want to DL it.
# [X] get RSS from channel url
# [X] Notify end user of which channel script is scanning, add name: to .channels.yaml
# [X] Add verbose
# [X] Add mp3 capability
# [ ] Refactor ME!
#

from docopt import docopt
from libs import *
import youtube_dl
import pdfkit
import os
import time
import sys
import re

percent = '  0.0'
the_error = ''
arguments = ''
basepath = os.path.dirname(os.path.abspath(__file__))
basename = os.path.basename(__file__)

def print(text):
    sys.stdout.write(text)
    sys.stdout.flush()

def delete_last_line():
    CURSOR_UP_ONE = '\x1b[1A' 
    ERASE_LINE = '\x1b[2K'
    print(CURSOR_UP_ONE + ERASE_LINE)

class MyLogger(object):
    def __init__(self):
        global basepath
        self.logfile = os.path.join(basepath,'.error.log')
            

    def debug(self, msg):
        global arguments
        if arguments['--debug']:
            print(msg + '\n')

    def warning(self, msg):
        pass

    def error(self, msg):
        try:
            with open(self.logfile, 'a') as log:
                ts = time.gmtime()
                log.write(time.strftime("%Y-%m-%d %H:%M:%S", ts) + "\n")
                log.write(msg + "\n")
            return True
        except:
            return False

def ydl_hook(d):
    global percent, arguments
    if '_percent_str' not in d or arguments['--debug']: return
    print('\b' * len(percent))
    percent = d['_percent_str']
    print(percent)

def ydl_opts(title,path,music):
    outtmpl = f"{os.path.join(path,title)}.%(ext)s"
    if not music:
        ydlopts = {
            "outtmpl": outtmpl,
            "format": "best",
            "quiet": True,
            "retries": 3,
            "nooverwrites": True,
            "continued": True,
            'logger': MyLogger(),
            "progress_hooks":[ydl_hook],
            }
    else:
        ydlopts = {
            'format': 'bestaudio/best',
            'outtmpl': outtmpl,
            'postprocessors': [
                {'key': 'FFmpegExtractAudio','preferredcodec': 'mp3',
                'preferredquality': '192',
                },
                {'key': 'FFmpegMetadata'},
            ],
            "quiet": True,
            "retries": 3,
            "nooverwrites": True,
            "continued": True,
            'logger': MyLogger(),
            "progress_hooks":[ydl_hook],
        }
    return ydlopts

def video_list(url,title='',path=''):
    try:
        with youtube_dl.YoutubeDL(ydl_opts(title,path,False)) as ydl:
            rv = ydl.extract_info(url, False)
    except Exception: raise
    if '_type' not in rv: 
        return {title: {'url':url,'path':path}}
    print(f"{title}...PLAYLIST!\n")
    rv_list = {}
    for entry in rv['entries']:
        rv_list[entry['title']] = {'url':entry['webpage_url'],'path':f"{path}/{title}"}
        print(f"{entry['title']} added.\n")
    return rv_list

def download(title,path,href,music=False): 
    global the_error,percent,arguments
    try:
        urls = video_list(href,title,path)
    except Exception: raise
    for video_title in urls.keys():
        print(f"{video_title}...Downloading: {(percent if not arguments['--debug'] else '')}")
        try:
            try:
                with youtube_dl.YoutubeDL(ydl_opts(video_title,urls[video_title]['path'],music)) as ydl:
                    ydl.download([urls[video_title]['url']]) 
            except Exception: raise
        except Exception: raise
        if not arguments['--debug']:
            print('\b' * (len(percent)+13))
            percent = '  0.0'
            print("SUCCESS!" + ' ' * 15 + '\n')
    return True

def in_filter(filter,title):
    if not isinstance(filter,list):
        filter = [filter]
    for pattern in filter:
        if isinstance(pattern,dict):
            for key,_value in pattern.items():
                pattern = key
        if re.search(pattern,title):
            return True
        else:
            continue
    return False

def get_rss(channel):
    from bs4 import BeautifulSoup
    import requests 
    reqs = requests.get(channel)
    soup = BeautifulSoup(reqs.text, 'html.parser')
    try:
        return soup.find("link",title="RSS").get('href')
    except:
        print("Couldn't find an RSS link for the channel provided.\n")
        exit(1)

def process_error(e):
    if "Premieres" in str(e):
        return (0,"Waiting for Premiere!")
    elif "no video" in str(e):
        return (2,"No video found!")
    elif "Copyright" in str(e):
        return (1,"Copyright Block!")
    elif "Unsupported URL" in str(e):
        return (3,"Unsupported site!")
    elif "Unable to extract" in str(e):
        return (3,"Unsupported site!")
    elif "giving up after" in str(e):
        return (1,"TIMEOUT!")
    elif "not available" in str(e):
        return (1,"Video not available.")
    elif "in your country" in str(e):
        return (1,"Region locked!!")
    else:
        return (1,f"Unknown Error!!\n{str(e)}")

def do_nothing(_href):
    pass

def yn_prompt(prompt):
    while True:
        try:
            answer = input(f"{prompt} (y/[n]) ")
            if answer[0] == 'y' or answer[0] == 'n':
                if answer[0] == 'y':
                    return True
                else:
                    return False                    
            else:
                raise ValueError
        except ValueError:
            print('You must enter y or n.\n')
        except IndexError:
            return False

def download_article(url,download_dir):
    try:
        pdfkit.from_url(str(url), download_dir)
        return True
    except:
        raise

def main():
    try:
        global percent, the_error,arguments,basepath
        args = arguments
        if args['--config']:
            if os.path.isfile(os.path.abspath(args['--config'])):
                if args['--debug'] or args['--verbose']: print(f"Loading custom configuration: {args['--config']}\n")
                try:
                    channels = Channel(config=os.path.abspath(args['--config'])).list()
                except LoadFailure:
                    raise
            else:
                print(f"File {args['--config']} does not exist.\n")
                exit(1)
        else:
            if args['--debug'] or args['--verbose']: print('Loading default configuration.\n')
            try:
                channels = Channel(base=basepath).list()
            except LoadFailure:
                raise
        
        problem_db = ProblemDB(base=basepath)
        for channel in channels:
            seen_db = SeenDB(base=basepath,channel=channel['name'])
            if args['--debug'] or args['--verbose']: print(f"Downloading {channel['name']} feed list...")
            video_list = Feed(channel['rss']).download()
            if video_list:
                if args['--debug'] or args['--verbose']: print("Done.\n")
                for item in video_list:
                    if args['--interactive']:
                        bypass_filter = False
                    else:
                        bypass_filter = False
                    if ('filter' in channel.keys() and in_filter(channel['filter'],item['title'])) or ('filter' not in channel.keys()) or bypass_filter:
                        if 'filter' in channel.keys():
                            for ptrn in channel['filter']:
                                if isinstance(ptrn,dict):
                                    for _pattern,subconfig in ptrn.items():
                                        download_dir = subconfig['download_dir']      
                                else:
                                    download_dir = channel['download_dir']
                        else:
                            download_dir = channel['download_dir']
                        if not seen_db.exists(item['href']) and not problem_db.is_ignored(item['href']):
                            if args['--interactive']:
                                decision = yn_prompt(f"Download {item['title']}?")
                                delete_last_line()
                                if not decision:
                                    seen_db.add(item['href'])
                                    print(f"{item['title']}...SKIPPING!!\n")
                                    continue
                            if not args['--demo']:
                                #check if feed has music flag
                                try:
                                    music = channel['music']
                                except KeyError:
                                    music = False
                                except:
                                    raise
                                if len(item['title']) > 100:
                                    title = item['title'][:100].replace("/","").replace("\\","")
                                else:
                                    title = item['title'].replace("/","").replace("\\","")
                                try:
                                    if download(title,download_dir,item['href'],music):
                                        seen_db.add(item['href'])
                                except youtube_dl.utils.DownloadError as e:
                                    action = [do_nothing,problem_db.add,problem_db.ignore_write,seen_db.add]
                                    rv = process_error(e)
                                    if rv[0] == 1:
                                        action[rv[0]](item['title'],item['href'])
                                    elif rv[0] == 2:
                                        target = os.path.join(download_dir,f"{item['title']}.pdf")
                                        download_article(item['href'],target)
                                    else:    
                                        action[rv[0]](item['href'])
                                    print(f"{item['title']}...{rv[1]}\n")
                                except Exception as e:
                                    print(f"{item['title']}\n{str(e)}\n")
                                    exit(1)
                            else:
                                print(f"{item['title']}...DEMO!\n")
                        else:
                            if not args['--hide-seen']:
                                print(f"{item['title']}...SEEN!\n")
            else:
                print("Failed.\n")
                print("Program terminating...\n")
                exit(1)
        if len(problem_db):
            print("\nThere were problems with the following links:\n") 
            if not args['--cron']:
                for problem in problem_db:
                    ignore = yn_prompt(f"{problem}: Ignore?")
                    if ignore:
                        problem_db.ignore(problem)
            else:
                print(f"{problem_db}\n")
        exit()
    except KeyboardInterrupt:
        print("\nProgram terminating...\n")
        exit(0)
    except Exception as e:
        print(f"UNKNOWN ERROR!!!\n{str(e)}\n")

if __name__ == "__main__":
  arguments = docopt(__doc__, version='rss2youtube-dl v.1.0.3')
  if arguments['--rss-from-channel']:
      print(f"{get_rss(arguments['--rss-from-channel'])}\n")
      exit(0)
  main()
  exit()
