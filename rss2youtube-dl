#!/usr/bin/env python3
"""
rss2youtube-dl
Desc: A small app that downloads and parses rss feeds for videos to download with youtube-dl
v.0.5.1
2020 by antiSOFT

Usage:
  rss2youtube-dl [-dCi] [-c CONFIGFILE]
  rss2youtube-dl --help
  rss2youtube-dl --version

Options:
  -c CONFIGFILE                    Use custom configuration file             
  -i --interactive                 Interactive mode
  -d --demo                        Don't save or add to seen
  -C --cron                        Script being run by cron, don't be interactive.
  -h --help                        Show this screen
  --version                        Show version info

"""

#
# TODO:
#
# [X] handle multiple filters
# [ ] handle filter to directory that overrides a default
# [X] problem_db and ignore_db
# [ ] make problem_db prompt more human readable
# [ ] add playlist handler
# [X] interactive mode that bypasses filters and asks on each unseen video if you want to DL it.

from docopt import docopt
from feed import Feed
from seendb import SeenDB
from problemdb import ProblemDB
from channel import Channel
import youtube_dl
import os
import time
import sys
import re

def ydl_opts(title,path,is_playlist):
    ydlopts = {
        "outtmpl": f"{path}/{title}.%(ext)s",
        "format": "best",
        "quiet": True,
        "retries": 3,
        "noplaylist": (not is_playlist),
        "nooverwrites": True,
        "continued": True,
        }
    return ydlopts

def is_video(item):
    if re.search(r'youtu.be', item) or re.search(r'youtube.com', item):
        return True
    if re.search(r'twitter.com', item):
        return True
    if re.search(r'facebook.com', item):
        return True
    return False

def download(title,path,href,is_playlist=False): 
    try:
        with youtube_dl.YoutubeDL(ydl_opts(title,path,is_playlist)) as ydl: 
            ydl.download([href]) 
        return True
    except:
        return False

def in_filter(filter,title):
    if not isinstance(filter,list):
        filter = [filter]
    for pattern in filter:
        #print(pattern,"->",title)
        if re.search(pattern,title):
            return True
        else:
            continue
    #print("false")
    return False

def main(args):
    if args['-c']:
        if os.path.isfile(args['-c']):
            channels = Channel(args['-c']).list()
        else:
            print("File",args['-c'],"does not exist")
            exit(1)
    else:    
        channels = Channel().list()
    seen_db = SeenDB()
    problem_db = ProblemDB()
    for channel in channels:
        #print(channel)
        video_list = Feed(channel['rss']).download()
        if video_list:
            for item in video_list:
                if args['--interactive']:
                    bypass_filter = True
                else:
                    bypass_filter = False
                if ('filter' in channel.keys() and in_filter(channel['filter'],item['title'])) or ('filter' not in channel.keys()) or bypass_filter:
                    print(item['title'],end="...",flush=True)
                    if not seen_db.exists(item['href']) and not problem_db.is_ignored(item['href']):
                        if is_video(item['href']):
                            if args['--interactive']:
                                decision = None
                                while decision == None:
                                    try:
                                        answer = input('Download ? (y/[n]) ')
                                        if answer[0] == 'y' or answer[0] == 'n' or len(answer) == 0:
                                            if answer[0] == 'y':
                                                decision = True
                                            else:
                                                decision = False                    
                                        else:
                                            raise ValueError
                                    except ValueError:
                                        print('You must enter y or n.')
                                    except IndexError:
                                        decision = False
                                if not decision:
                                    seen_db.add(item['href'])
                                    print('SKIPPING!!')
                                    continue
                            print("Downloading",end=": ",flush=True)
                            if not args['--demo']:
                                if download(item['title'],channel['download_dir'],item['href']):
                                    seen_db.add(item['href'])
                                    print("SUCCESS!")
                                else:
                                    problem_db.add(item['href'])
                                    print("FAILED!!")
                            else:
                                print("DEMO!")
                        else:
                            continue
                    else:
                        print("SEEN!")
    
    if len(problem_db):
        print("\nThere were problems with the following links:") 
        if not args['--cron']:
            for problem in problem_db:
                while True:
                    try:
                        answer = input(problem.strip() + ": Ignore? (y/[n]) ")
                        if answer[0].lower() != 'y' and answer[0].lower() != 'n' and len(answer) != 0:
                            raise ValueError
                        else:
                            if answer[0].lower() == 'y':
                                problem_db.ignore(problem)
                            break
                    except ValueError:
                        print("Enter yes or no....")
        else:
            print(problem_db)
    exit()

if __name__ == "__main__":
  arguments = docopt(__doc__, version='rss2youtube-dl v0.5.1')
  #print(arguments)
  #exit()
  main(arguments)
  exit()
