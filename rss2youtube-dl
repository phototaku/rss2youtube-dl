#!/usr/bin/env /home/mastertaku/Programming/Python/feedDownloader/.venv/bin/python3
"""
rss2youtube-dl
Desc: A utility that downloads and parses rss feeds for videos to download with youtube-dl
v.1.0
2020 by antiSOFT

Usage:
  rss2youtube-dl [-CDHvdhi] [-c CONFIGFILE] [-r CHANNEL]
  rss2youtube-dl --help
  rss2youtube-dl --version

Options:
  -c --config CONFIGFILE                Use custom configuration file             
  -i --interactive                      Interactive mode
  -d --demo                             Don't save or add to seen
  -H --hide-seen                        Hide seen messages.
  -C --cron                             Script being run by cron, don't be interactive.
  -D --debug                            Print debug info to screen.
  -r --rss-from-channel CHANNEL         Get rss url for youtube channel url provided
  -h --help                             Show this screen
  --version                             Show version info

"""

#
# TODO:
#
# [X] handle multiple filters
# [ ] handle filter to directory that overrides a default
# [X] add progress
# [X] problem_db and ignore_db
# [X] make problem_db prompt more human readable
# [X] add playlist handler
# [X] playlist downloads to folder
# [X] interactive mode that bypasses filters and asks on each unseen video if you want to DL it.
# [X] get RSS from channel url
# [ ] Refactor the code to get rid of the deep if/then
# [X] Notify end user of which channel script is scanning, add name: to .channels.yaml
#

from docopt import docopt
from feed import Feed
from seendb import SeenDB
from problemdb import ProblemDB
from channel import Channel
import youtube_dl
import os
import time
import sys
import re

percent = '  0.0'
the_error = ''
arguments = ''
basepath = os.path.dirname(os.path.abspath(__file__))
basename = os.path.basename(__file__)

def delete_last_line():
    CURSOR_UP_ONE = '\x1b[1A' 
    ERASE_LINE = '\x1b[2K'
    print(CURSOR_UP_ONE + ERASE_LINE,end="",flush=True)

def print_line(title,msg):
    print(f"{title}...{msg}",flush=True)

class MyLogger(object):
    def __init__(self):
        global basepath
        self.logfile = os.path.join(basepath,'.error.log')
        with open(self.logfile, 'a') as log:
            ts = time.gmtime()
            log.write(time.strftime("%Y-%m-%d %H:%M:%S", ts) + "\n")

    def debug(self, msg):
        global arguments
        if arguments['--debug']:

            print(msg)

    def warning(self, msg):
        pass

    def error(self, msg):
        try:
            with open(self.logfile, 'a') as log:
                log.write(msg + "\n")
            return True
        except:
            return False

def ydl_hook(d):
    global percent
    if '_percent_str' not in d: return
    print('\b' * len(percent), end="", flush=True)
    percent = d['_percent_str']
    print(percent,end='',flush=True)

def ydl_opts(title,path):
    ydlopts = {
        "outtmpl": f"{path}/{title}.%(ext)s",
        "format": "best",
        "quiet": True,
        "retries": 3,
        "nooverwrites": True,
        "continued": True,
        'logger': MyLogger(),
        "progress_hooks":[ydl_hook],
        }
    return ydlopts

def video_list(url,title='',path=''):
    try:
        with youtube_dl.YoutubeDL(ydl_opts(title,path)) as ydl:
            rv = ydl.extract_info(url, False)
    except Exception: raise
    if '_type' not in rv: 
        return {title: {'url':url,'path':path}}
    print_line(title,"PLAYLIST!")
    rv_list = {}
    for entry in rv['entries']:
        rv_list[entry['title']] = {'url':entry['webpage_url'],'path':f"{path}/{title}"}
        print(f"{entry['title']} added.",flush=True)
    return rv_list

def download(title,path,href): 
    global the_error,percent
    try:
        urls = video_list(href,title,path)
    except Exception: raise
    #print(urls)
    for video_title in urls.keys():
        print(f"{video_title}...Downloading",end=f": {percent}",flush=True)
        try:
            try:
                with youtube_dl.YoutubeDL(ydl_opts(video_title,urls[video_title]['path'])) as ydl:
                    ydl.download([urls[video_title]['url']]) 
            except Exception: raise
        except Exception: raise
        print('\b' * (len(percent)+13), end="", flush=True)
        percent = '  0.0'
        print("SUCCESS!" + ' ' * 15)
    return True

def in_filter(filter,title):
    if not isinstance(filter,list):
        filter = [filter]
    for pattern in filter:
        #print(pattern,"->",title)
        if re.search(pattern,title):
            return True
        else:
            continue
    #print("false")
    return False

def get_rss(channel):
    from bs4 import BeautifulSoup
    import requests 
    reqs = requests.get(channel)
    soup = BeautifulSoup(reqs.text, 'html.parser')
    try:
        return soup.find("link",title="RSS").get('href')
    except:
        print("Couldn't find an RSS link for the channel provided.")
        exit(1)

def process_error(e):
    if "Premieres" in str(e):
        return (0,"Waiting for Premiere!")
    elif "no video" in str(e):
        return (2,"No video found!")
    elif "Copyright" in str(e):
        return (1,"Copyright Block!")
    elif "Unsupported URL" in str(e):
        return (3,"Unsupported site!")
    elif "Unable to extract" in str(e):
        return (3,"Unsupported site!")
    elif "giving up after" in str(e):
        return (1,"TIMEOUT!")
    else:
        return (1,"Unknown Error!!")

def do_nothing(_href):
    pass

def yn_prompt(prompt):
    while True:
        try:
            answer = input(f"{prompt} (y/[n]) ")
            if answer[0] == 'y' or answer[0] == 'n':
                if answer[0] == 'y':
                    return True
                else:
                    return False                    
            else:
                raise ValueError
        except ValueError:
            print('You must enter y or n.')
        except IndexError:
            return False

def main():
    try:
        global percent, the_error,arguments
        args = arguments
        if args['--config']:
            if os.path.isfile(args['--config']):
                if args['--debug']: print(f"Loading custom configuration: {args['--config']}")
                channels = Channel(args['--config']).list()
            else:
                print("File",args['--config'],"does not exist")
                exit(1)
        else:
            if args['--debug']: print('Loading default configuration.')
            channels = Channel().list()
        seen_db = SeenDB()
        problem_db = ProblemDB()
        for channel in channels:
            if args['--debug']: print("Downloading", channel['name'], "feed list...",end="",flush=True)
            video_list = Feed(channel['rss']).download()
            if video_list:
                if args['--debug']: print("Done.")
                for item in video_list:
                    if args['--interactive']:
                        bypass_filter = True
                    else:
                        bypass_filter = False
                    if ('filter' in channel.keys() and in_filter(channel['filter'],item['title'])) or ('filter' not in channel.keys()) or bypass_filter:
                        if not seen_db.exists(item['href']) and not problem_db.is_ignored(item['href']):
                            if args['--interactive']:
                                decision = yn_prompt(f"Download {item['title']}?")
                                delete_last_line()
                                if not decision:
                                    seen_db.add(item['href'])
                                    print_line(item['title'],"SKIPPING!!")
                                    continue
                            if not args['--demo']:
                                try:
                                    if download(item['title'],channel['download_dir'],item['href']):
                                        seen_db.add(item['href'])
                                except youtube_dl.utils.DownloadError as e:
                                    action = [do_nothing,problem_db.add,problem_db.ignore_write,seen_db.add]
                                    rv = process_error(e)
                                    if rv[0] == 1:
                                        action[rv[0]](item['title'],item['href'])
                                    else:    
                                        action[rv[0]](item['href'])
                                    print_line(item['title'],rv[1])
                                except Exception as e:
                                    print(item['title'],"\n",str(e))
                                    exit(1)
                            else:
                                print_line(item['title'],"DEMO!")
                        else:
                            if not args['--hide-seen']:
                                print_line(item['title'],"SEEN!")
            else:
                print("Failed.")
                print("Program terminating...")
                exit(1)
        if len(problem_db):
            print("\nThere were problems with the following links:") 
            if not args['--cron']:
                for problem in problem_db:
                    ignore = yn_prompt(f"{problem}: Ignore?")
                    if ignore:
                        problem_db.ignore(problem)
            else:
                print(problem_db)
        exit()
    except KeyboardInterrupt:
        print("\nProgram terminating...")
        exit(0)

if __name__ == "__main__":
  arguments = docopt(__doc__, version='rss2youtube-dl v.1.0')
  #print(arguments)
  #exit()
  if arguments['--rss-from-channel']:
      print(get_rss(arguments['--rss-from-channel']))
      exit(0)
  main()
  exit()
